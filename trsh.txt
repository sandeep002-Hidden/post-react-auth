
app.post("/users", async (req, res) => {
    try {
      const { FirstName, LastName, Email, UserName, Password } = req.body;
      const user = await prisma.user.create({
        data: {
          FirstName,
          LastName,
          Email,
          UserName,
          Password,
        },
      });
      res.json(user);
    } catch (error) {
      console.log(error.message);
      res.status(500).json({ error: "Unable to create user",message:error.message,success:false });
    }
  });
  
  app.get("/users", async (req, res) => {
    try {
      const users = await prisma.user.findMany();
      res.json(users);
    } catch (error) {
      res.status(500).json({ error: "Unable to fetch users" });
    }
  });
  
  
    const handleClick = async () => {
    if (loading) return;

    try {
      setLoading(true);
      const res = await axios.post(
        `${import.meta.env.VITE_BACKEND_URI}/auth/login`,
        {
          cred: user.UserNameOrEmail,
          password: user.Password,
        }
      );
      console.log(res)
      // Handle successful response
      // if (status === 200 && data.success) {
      //   // You can access response data like this:
      //   const { message, user } = data;

      //   setMessage({
      //     Message: message || "Login successful!",
      //     isGood: true,
      //   });

      //   if (user) {
      //     setUser(user);
      //     // Or using context
      //     // userContext.setUser(user);
      //   }

      // You can also store data in localStorage if needed
      // localStorage.setItem('user', JSON.stringify(user));

      // Navigate to dashboard or home page
      // navigate('/dashboard');
      // }
    } catch (error) {
      const err = error as AxiosError;
      const errorMessage = err.response?.data || "An error occurred";

      // setMessage({
      //   Message: errorMessage,
      //   isGood: false
      // });

      // console.error('Login error:', err);
    } finally {
      setLoading(false);
    }
  };